import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { ResultsType } from './Results';

export const generateResultsPDF = (results: ResultsType | null, title: string) => {
  if (!results) {
    console.error('No results data available');
    throw new Error('No results data available');
  }

  try {
    const doc = new jsPDF();
    doc.setFont('helvetica');
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 15;
    const maxWidth = pageWidth - 2 * margin;
    const headerHeight = 50; // Increased to account for header (42mm) + buffer
    const footerHeight = 20; // Footer height
    const minSpaceRequired = 60; // Minimum space needed for title + table start

    // Color palette
    const primaryColor = '#2563EB'; // Blue
    const secondaryColor = '#7C3AED'; // Purple
    const accentColor = '#10B981'; // Green
    const warningColor = '#F59E0B'; // Amber
    const textColor = '#1F2937'; // Dark Gray
    const subTextColor = '#6B7280'; // Gray
    const bgColor = '#F8FAFC'; // Light Gray
    const questionBgColor = '#E0E7FF'; // Light Purple for question titles

    // Header with gradient background
    const drawHeader = () => {
      doc.setFillColor(primaryColor);
      doc.rect(0, 0, pageWidth, 40, 'F');
      doc.setFillColor(secondaryColor);
      doc.rect(0, 40, pageWidth, 2, 'F');
      doc.setFontSize(22);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor('#FFFFFF');
      doc.text('Interview Results', margin, 28);
    };

    // Footer
    const drawFooter = (page: number, totalPages: number) => {
      doc.setFillColor(bgColor);
      doc.rect(0, pageHeight - footerHeight, pageWidth, footerHeight, 'F');
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(subTextColor);
      doc.text(
        `Page ${page} of ${totalPages}`,
        pageWidth - margin,
        pageHeight - 8,
        { align: 'right' }
      );
      doc.setTextColor(primaryColor);
      doc.text('Generated by AI Mock Interview', margin, pageHeight - 8);
    };

    // Section Divider
    const drawSectionDivider = (y: number) => {
      doc.setDrawColor(secondaryColor);
      doc.setLineWidth(0.5);
      doc.line(margin, y, pageWidth - margin, y);
    };

    // Header for first page
    drawHeader();

    // Metadata
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(textColor);
    doc.text(title, margin, 50);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(subTextColor);
    doc.text(
      new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      }),
      margin,
      58
    );

    // Overall Performance
    let currentY = 70;
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(textColor);
    doc.text('Overall Performance', margin, currentY);
    drawSectionDivider(currentY + 2);

    autoTable(doc, {
      startY: currentY + 8,
      head: [['Score', 'Description', 'Feedback']],
      body: [[
        `${results.overallScore}%`,
        getScoreDescription(results.overallScore),
        results.feedback || 'No feedback provided'
      ]],
      theme: 'grid',
      headStyles: {
        fillColor: primaryColor,
        textColor: '#FFFFFF',
        fontSize: 9,
        font: 'helvetica',
        fontStyle: 'bold',
        halign: 'center',
      },
      bodyStyles: {
        fontSize: 8,
        textColor: textColor,
        font: 'helvetica',
        fillColor: bgColor,
      },
      margin: { left: margin, right: margin },
      styles: { cellPadding: 4 },
      columnStyles: {
        0: { cellWidth: 30, halign: 'center' },
        1: { cellWidth: 40, halign: 'center' },
        2: { cellWidth: maxWidth - 70 },
      },
    });

    // Skills Assessment
    interface ExtendedJSPDF extends jsPDF {
      lastAutoTable: { finalY: number };
    }
    const extendedDoc = doc as ExtendedJSPDF;
    currentY = extendedDoc.lastAutoTable.finalY + 15;
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(textColor);
    doc.text('Skills Assessment', margin, currentY);
    drawSectionDivider(currentY + 2);

    const skillData = Object.entries(results.skillBreakdown).map(([key, value]) => [
      key.replace(/([A-Z])/g, ' $1').trim(),
      `${value}%`,
    ]);

    autoTable(doc, {
      startY: currentY + 8,
      head: [['Skill', 'Score']],
      body: skillData,
      theme: 'grid',
      headStyles: {
        fillColor: primaryColor,
        textColor: '#FFFFFF',
        fontSize: 9,
        font: 'helvetica',
        fontStyle: 'bold',
        halign: 'center',
      },
      bodyStyles: {
        fontSize: 8,
        textColor: textColor,
        font: 'helvetica',
        fillColor: bgColor,
      },
      alternateRowStyles: { fillColor: '#FFFFFF' },
      margin: { left: margin, right: margin },
      styles: { cellPadding: 4 },
      columnStyles: {
        0: { cellWidth: maxWidth - 30 },
        1: { cellWidth: 30, halign: 'center' },
      },
    });

    // Strengths and Areas for Improvement
    currentY = extendedDoc.lastAutoTable.finalY + 15;
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(textColor);
    doc.text('Strengths & Areas for Improvement', margin, currentY);
    drawSectionDivider(currentY + 2);

    const strengthsData = results.strengths.map((strength) => [strength]);
    const improvementsData = results.improvements.map((improvement) => [improvement]);

    // Areas for Improvement (rendered first)
    autoTable(doc, {
      startY: currentY + 8,
      head: [['Areas for Improvement']],
      body: improvementsData,
      theme: 'grid',
      headStyles: {
        fillColor: warningColor,
        textColor: '#FFFFFF',
        fontSize: 9,
        font: 'helvetica',
        fontStyle: 'bold',
      },
      bodyStyles: {
        fontSize: 8,
        textColor: textColor,
        font: 'helvetica',
        fillColor: bgColor,
      },
      alternateRowStyles: { fillColor: '#FFFFFF' },
      margin: { left: margin, right: margin },
      styles: { cellPadding: 4 },
      columnStyles: { 0: { cellWidth: maxWidth } },
    });

    currentY = extendedDoc.lastAutoTable.finalY + 15;

    // Strengths (rendered second)
    autoTable(doc, {
      startY: currentY,
      head: [['Strengths']],
      body: strengthsData,
      theme: 'grid',
      headStyles: {
        fillColor: accentColor,
        textColor: '#FFFFFF',
        fontSize: 9,
        font: 'helvetica',
        fontStyle: 'bold',
      },
      bodyStyles: {
        fontSize: 8,
        textColor: textColor,
        font: 'helvetica',
        fillColor: bgColor,
      },
      alternateRowStyles: { fillColor: '#FFFFFF' },
      margin: { left: margin, right: margin },
      styles: { cellPadding: 4 },
      columnStyles: { 0: { cellWidth: maxWidth } },
    });

    currentY = extendedDoc.lastAutoTable.finalY + 15;

    // Question Analysis
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(textColor);
    doc.text('Question Analysis', margin, currentY);
    drawSectionDivider(currentY + 2);

    results.answerFeedback.forEach((item, index) => {
      // Check if there's enough space for the title and table start
      if (currentY + minSpaceRequired > pageHeight - footerHeight) {
        doc.addPage();
        drawHeader();
        currentY = headerHeight;
      }

      const questionTitle = `Question ${index + 1}: ${item.question}`;
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(textColor);
      const splitText = doc.splitTextToSize(questionTitle, maxWidth - 8);
      const titleHeight = splitText.length * 8;
      // Add background and border for question title
      doc.setFillColor(questionBgColor);
      doc.setDrawColor(secondaryColor);
      doc.setLineWidth(0.3);
      doc.roundedRect(margin - 4, currentY + 4, maxWidth + 8, titleHeight + 8, 2, 2, 'FD');
      doc.text(splitText, margin, currentY + 12);
      currentY += titleHeight + 16;

      // Check if there's enough space for the table
      if (currentY + 40 > pageHeight - footerHeight) {
        doc.addPage();
        drawHeader();
        currentY = headerHeight;
      }

      autoTable(doc, {
        startY: currentY,
        body: [
          ['Score', `${item.score}%`],
          ['Answer', item.answer || 'No answer provided'],
          ['Feedback', item.feedback || 'No feedback provided'],
          ['Strengths', item.strengths.join(', ') || 'None identified'],
          ['Improvements', item.improvements.join(', ') || 'None identified'],
        ],
        theme: 'grid',
        headStyles: {
          fillColor: secondaryColor,
          textColor: '#FFFFFF',
          fontSize: 9,
          font: 'helvetica',
          fontStyle: 'bold',
        },
        bodyStyles: {
          fontSize: 8,
          textColor: textColor,
          font: 'helvetica',
          fillColor: bgColor,
        },
        alternateRowStyles: { fillColor: '#FFFFFF' },
        margin: { left: margin, right: margin },
        styles: { cellPadding: 4 },
        columnStyles: {
          0: { cellWidth: 40, halign: 'left', fontStyle: 'bold' },
          1: { cellWidth: maxWidth - 40 },
        },
      });

      currentY = extendedDoc.lastAutoTable.finalY + 20;
    });

    // Add page numbers and footers
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      drawFooter(i, pageCount);
      if (i > 1) {
        drawHeader();
      }
    }

    // Save the PDF
    doc.save(`${title}_Interview_Results.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

// Helper function to get score description
const getScoreDescription = (score: number): string => {
  if (score >= 85) return 'Exceptional';
  if (score >= 70) return 'Good';
  if (score >= 40) return 'Needs improvement';
  return 'Significant work needed';
};